// Code generated by protoc-gen-go.
// source: github.com/micro/router-srv/proto/router/router.proto
// DO NOT EDIT!

/*
Package go_micro_srv_router_router is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/router-srv/proto/router/router.proto

It has these top-level messages:
	Filter
	Expression
	StatsRequest
	StatsResponse
	SelectRequest
	SelectResponse
	MarkRequest
	MarkResponse
*/
package go_micro_srv_router_router

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_micro_os_router "github.com/micro/go-os/router/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Filter struct {
	Version  *Expression   `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Metadata []*Expression `protobuf:"bytes,2,rep,name=metadata" json:"metadata,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Filter) GetVersion() *Expression {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Filter) GetMetadata() []*Expression {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Expression struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// equals, not equals
	Operator string `protobuf:"bytes,3,opt,name=operator" json:"operator,omitempty"`
}

func (m *Expression) Reset()                    { *m = Expression{} }
func (m *Expression) String() string            { return proto.CompactTextString(m) }
func (*Expression) ProtoMessage()               {}
func (*Expression) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StatsRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	NodeId  string `protobuf:"bytes,2,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
}

func (m *StatsRequest) Reset()                    { *m = StatsRequest{} }
func (m *StatsRequest) String() string            { return proto.CompactTextString(m) }
func (*StatsRequest) ProtoMessage()               {}
func (*StatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StatsResponse struct {
	Stats []*go_micro_os_router.Stats `protobuf:"bytes,1,rep,name=stats" json:"stats,omitempty"`
}

func (m *StatsResponse) Reset()                    { *m = StatsResponse{} }
func (m *StatsResponse) String() string            { return proto.CompactTextString(m) }
func (*StatsResponse) ProtoMessage()               {}
func (*StatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StatsResponse) GetStats() []*go_micro_os_router.Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type SelectRequest struct {
	Service string    `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Filter  []*Filter `protobuf:"bytes,2,rep,name=filter" json:"filter,omitempty"`
}

func (m *SelectRequest) Reset()                    { *m = SelectRequest{} }
func (m *SelectRequest) String() string            { return proto.CompactTextString(m) }
func (*SelectRequest) ProtoMessage()               {}
func (*SelectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SelectRequest) GetFilter() []*Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type SelectResponse struct {
	// returns a list services since we have name/version
	Services []*go_micro_os_router.Service `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
	// timestamp at which this list expires
	Expires int64 `protobuf:"varint,2,opt,name=expires" json:"expires,omitempty"`
}

func (m *SelectResponse) Reset()                    { *m = SelectResponse{} }
func (m *SelectResponse) String() string            { return proto.CompactTextString(m) }
func (*SelectResponse) ProtoMessage()               {}
func (*SelectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SelectResponse) GetServices() []*go_micro_os_router.Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type MarkRequest struct {
	Service string                   `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Node    *go_micro_os_router.Node `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
	Error   string                   `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *MarkRequest) Reset()                    { *m = MarkRequest{} }
func (m *MarkRequest) String() string            { return proto.CompactTextString(m) }
func (*MarkRequest) ProtoMessage()               {}
func (*MarkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MarkRequest) GetNode() *go_micro_os_router.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type MarkResponse struct {
}

func (m *MarkResponse) Reset()                    { *m = MarkResponse{} }
func (m *MarkResponse) String() string            { return proto.CompactTextString(m) }
func (*MarkResponse) ProtoMessage()               {}
func (*MarkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*Filter)(nil), "go.micro.srv.router.router.Filter")
	proto.RegisterType((*Expression)(nil), "go.micro.srv.router.router.Expression")
	proto.RegisterType((*StatsRequest)(nil), "go.micro.srv.router.router.StatsRequest")
	proto.RegisterType((*StatsResponse)(nil), "go.micro.srv.router.router.StatsResponse")
	proto.RegisterType((*SelectRequest)(nil), "go.micro.srv.router.router.SelectRequest")
	proto.RegisterType((*SelectResponse)(nil), "go.micro.srv.router.router.SelectResponse")
	proto.RegisterType((*MarkRequest)(nil), "go.micro.srv.router.router.MarkRequest")
	proto.RegisterType((*MarkResponse)(nil), "go.micro.srv.router.router.MarkResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Router service

type RouterClient interface {
	Stats(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*StatsResponse, error)
	Select(ctx context.Context, in *SelectRequest, opts ...client.CallOption) (*SelectResponse, error)
	Mark(ctx context.Context, in *MarkRequest, opts ...client.CallOption) (*MarkResponse, error)
	SelectStream(ctx context.Context, in *SelectRequest, opts ...client.CallOption) (Router_SelectStreamClient, error)
}

type routerClient struct {
	c           client.Client
	serviceName string
}

func NewRouterClient(serviceName string, c client.Client) RouterClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.router.router"
	}
	return &routerClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *routerClient) Stats(ctx context.Context, in *StatsRequest, opts ...client.CallOption) (*StatsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Router.Stats", in)
	out := new(StatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) Select(ctx context.Context, in *SelectRequest, opts ...client.CallOption) (*SelectResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Router.Select", in)
	out := new(SelectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) Mark(ctx context.Context, in *MarkRequest, opts ...client.CallOption) (*MarkResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Router.Mark", in)
	out := new(MarkResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) SelectStream(ctx context.Context, in *SelectRequest, opts ...client.CallOption) (Router_SelectStreamClient, error) {
	req := c.c.NewRequest(c.serviceName, "Router.SelectStream", &SelectRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &routerSelectStreamClient{stream}, nil
}

type Router_SelectStreamClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*SelectResponse, error)
}

type routerSelectStreamClient struct {
	stream client.Streamer
}

func (x *routerSelectStreamClient) Close() error {
	return x.stream.Close()
}

func (x *routerSelectStreamClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *routerSelectStreamClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *routerSelectStreamClient) Recv() (*SelectResponse, error) {
	m := new(SelectResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Router service

type RouterHandler interface {
	Stats(context.Context, *StatsRequest, *StatsResponse) error
	Select(context.Context, *SelectRequest, *SelectResponse) error
	Mark(context.Context, *MarkRequest, *MarkResponse) error
	SelectStream(context.Context, *SelectRequest, Router_SelectStreamStream) error
}

func RegisterRouterHandler(s server.Server, hdlr RouterHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Router{hdlr}, opts...))
}

type Router struct {
	RouterHandler
}

func (h *Router) Stats(ctx context.Context, in *StatsRequest, out *StatsResponse) error {
	return h.RouterHandler.Stats(ctx, in, out)
}

func (h *Router) Select(ctx context.Context, in *SelectRequest, out *SelectResponse) error {
	return h.RouterHandler.Select(ctx, in, out)
}

func (h *Router) Mark(ctx context.Context, in *MarkRequest, out *MarkResponse) error {
	return h.RouterHandler.Mark(ctx, in, out)
}

func (h *Router) SelectStream(ctx context.Context, stream server.Streamer) error {
	m := new(SelectRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.RouterHandler.SelectStream(ctx, m, &routerSelectStreamStream{stream})
}

type Router_SelectStreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*SelectResponse) error
}

type routerSelectStreamStream struct {
	stream server.Streamer
}

func (x *routerSelectStreamStream) Close() error {
	return x.stream.Close()
}

func (x *routerSelectStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *routerSelectStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *routerSelectStreamStream) Send(m *SelectResponse) error {
	return x.stream.Send(m)
}

func init() {
	proto.RegisterFile("github.com/micro/router-srv/proto/router/router.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6b, 0x13, 0x41,
	0x14, 0x37, 0x6e, 0xb3, 0x89, 0x2f, 0xb5, 0xc8, 0x20, 0xb8, 0xae, 0x97, 0x32, 0x07, 0x8d, 0x62,
	0x37, 0x25, 0x22, 0x82, 0xa7, 0x2a, 0x28, 0x78, 0x50, 0x64, 0x7a, 0x14, 0x94, 0xe9, 0xe6, 0x19,
	0x87, 0x7c, 0xcc, 0x3a, 0x33, 0x09, 0xf5, 0x9f, 0xf0, 0xe2, 0x3f, 0xec, 0x7c, 0x6e, 0x03, 0xd6,
	0x24, 0x1e, 0x3c, 0x6d, 0xdf, 0x9b, 0xdf, 0xc7, 0x7b, 0xbf, 0x57, 0x02, 0xcf, 0xa7, 0xc2, 0x7c,
	0x5b, 0x5d, 0x54, 0xb5, 0x5c, 0x8c, 0x16, 0xa2, 0x56, 0x72, 0xa4, 0xe4, 0xca, 0xa0, 0x3a, 0xd1,
	0x6a, 0x3d, 0x6a, 0x94, 0x34, 0xa9, 0x11, 0x3f, 0x95, 0xef, 0x91, 0x72, 0x2a, 0x2b, 0x0f, 0xaf,
	0x2c, 0xae, 0x8a, 0x4f, 0xe1, 0x53, 0x9e, 0xfe, 0x21, 0x39, 0x95, 0x27, 0x52, 0x27, 0x9d, 0x4d,
	0xd1, 0xa0, 0x46, 0x7f, 0x76, 0x20, 0x7f, 0x2b, 0xe6, 0xb6, 0x41, 0xce, 0xa0, 0xb7, 0x46, 0xa5,
	0x85, 0x5c, 0x16, 0x9d, 0xe3, 0xce, 0x70, 0x30, 0x7e, 0x58, 0xfd, 0xdd, 0xaa, 0x7a, 0x73, 0xd9,
	0x28, 0xd4, 0x0e, 0xcd, 0x12, 0x8d, 0xbc, 0x86, 0xfe, 0x02, 0x0d, 0x9f, 0x70, 0xc3, 0x8b, 0x9b,
	0xc7, 0xd9, 0x3f, 0x48, 0xb4, 0x3c, 0xfa, 0x11, 0xe0, 0xaa, 0x4f, 0xee, 0x40, 0x36, 0xc3, 0x1f,
	0x7e, 0x9e, 0x5b, 0xcc, 0xfd, 0x49, 0xee, 0x42, 0x77, 0xcd, 0xe7, 0x2b, 0xb4, 0x06, 0xae, 0x17,
	0x0a, 0x52, 0x42, 0x5f, 0x36, 0xa8, 0xb8, 0x91, 0xaa, 0xc8, 0xfc, 0x43, 0x5b, 0xd3, 0x57, 0x70,
	0x78, 0x6e, 0xb8, 0xd1, 0x0c, 0xbf, 0xaf, 0x50, 0x1b, 0x52, 0x40, 0x4f, 0xa3, 0x5a, 0x8b, 0x1a,
	0xa3, 0x6e, 0x2a, 0xc9, 0x3d, 0xe8, 0x2d, 0xe5, 0x04, 0xbf, 0x88, 0x49, 0x54, 0xcf, 0x5d, 0xf9,
	0x6e, 0x42, 0xcf, 0xe0, 0x76, 0x94, 0xd0, 0x8d, 0x5c, 0x6a, 0x24, 0x23, 0xe8, 0x6a, 0xd7, 0xb0,
	0x0a, 0x6e, 0xcd, 0xfb, 0x57, 0x6b, 0x4a, 0x9d, 0xd6, 0x0b, 0x8c, 0x80, 0xa3, 0x68, 0x15, 0x70,
	0x8e, 0xb5, 0xd9, 0x3d, 0xc5, 0x4b, 0xc8, 0xbf, 0xfa, 0x8b, 0xc4, 0x0c, 0xe9, 0xb6, 0x0c, 0xc3,
	0xed, 0x58, 0x64, 0xd0, 0x1a, 0x8e, 0x92, 0x4d, 0x9c, 0xf4, 0x05, 0xf4, 0xa3, 0x70, 0x1a, 0xf6,
	0xc1, 0xb5, 0xc3, 0x06, 0x0c, 0x6b, 0xc1, 0x6e, 0x40, 0xbc, 0x6c, 0x84, 0xbd, 0x84, 0x0f, 0x23,
	0x63, 0xa9, 0xa4, 0x33, 0x18, 0xbc, 0xe7, 0x6a, 0xb6, 0x7b, 0x93, 0xa7, 0x70, 0xe0, 0x02, 0xf4,
	0xfc, 0xc1, 0xb8, 0xb8, 0xce, 0xf7, 0x83, 0x7d, 0x67, 0x1e, 0xe5, 0x2e, 0x8b, 0x4a, 0xb5, 0x07,
	0x0c, 0x05, 0x3d, 0x82, 0xc3, 0x60, 0x16, 0xf6, 0x19, 0xff, 0xca, 0x20, 0x67, 0x9e, 0x4b, 0x3e,
	0x43, 0xd7, 0x67, 0x4c, 0x86, 0xdb, 0x12, 0xda, 0xbc, 0x7d, 0xf9, 0x78, 0x0f, 0x64, 0x30, 0xa2,
	0x37, 0x08, 0x87, 0x3c, 0x84, 0x49, 0xb6, 0xd3, 0x36, 0xef, 0x5a, 0x3e, 0xd9, 0x07, 0xda, 0x5a,
	0x7c, 0x82, 0x03, 0xb7, 0x1d, 0x79, 0xb4, 0x8d, 0xb5, 0x11, 0x76, 0x39, 0xdc, 0x0d, 0x6c, 0xc5,
	0x85, 0xfd, 0xc7, 0xf7, 0x86, 0xe7, 0x46, 0x21, 0x5f, 0xfc, 0xb7, 0x2d, 0x4e, 0x3b, 0x17, 0xb9,
	0xff, 0x35, 0x79, 0xf6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x12, 0xd8, 0x5f, 0x8a, 0xd4, 0x04, 0x00,
	0x00,
}
